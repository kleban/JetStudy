// <auto-generated />
using System;
using JetStudy.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JetStudy.Core.Migrations
{
    [DbContext(typeof(JetStudyContext))]
    partial class JetStudyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseSessionUser", b =>
                {
                    b.Property<string>("InstructorsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SessionsId")
                        .HasColumnType("int");

                    b.HasKey("InstructorsId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("CourseSessionUser");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParticipationRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VefificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipationRecordId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoverPath = "\\img\\course\\no_cover.jpg",
                            DetailedDesc = "Курс \"Аналіз даних для наукових досліджень\" є спеціалізованим навчальним програмою, розробленим для тих, хто цікавиться використанням аналізу даних у наукових дослідженнях. Курс вдосконалює розуміння учасників щодо методів, інструментів і процесів, пов'язаних з обробкою і аналізом даних в контексті наукових досліджень.",
                            OwnerId = "1f27bd84-3de8-4937-8ddc-a6a4d5312392",
                            Requirements = "Python, R, Jupyter Notebook, Anaconda, RStduio Desktop",
                            ShortDesc = "Курс розглядає методи та інструменти аналізу даних у наукових дослідженнях. Включає в себе збір, очищення і статистичний аналіз даних, щоб підготувати учасників до ефективного проведення наукових досліджень.",
                            Title = "Аналіз даних для наукових досліджень"
                        },
                        new
                        {
                            Id = 2,
                            CoverPath = "\\img\\course\\no_cover.jpg",
                            DetailedDesc = "Курс \"Аналіз даних для наукових досліджень\" є спеціалізованим навчальним програмою, розробленим для тих, хто цікавиться використанням аналізу даних у наукових дослідженнях. Курс вдосконалює розуміння учасників щодо методів, інструментів і процесів, пов'язаних з обробкою і аналізом даних в контексті наукових досліджень.",
                            OwnerId = "ffb01bfb-0c3b-4fa5-9f49-a10f9d4a5c7c",
                            Requirements = "Python, R, Jupyter Notebook, Anaconda, RStduio Desktop",
                            ShortDesc = "Курс розглядає методи та інструменти аналізу даних у наукових дослідженнях. Включає в себе збір, очищення і статистичний аналіз даних, щоб підготувати учасників до ефективного проведення наукових досліджень.",
                            Title = "Аналіз даних для маркетингу"
                        });
                });

            modelBuilder.Entity("JetStudy.Core.Entities.CourseSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("CourseSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            End = new DateTime(2023, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1,
                            Title = "Аналіз даних для наукових досліджень",
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("JetStudy.Core.Entities.CourseSessionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseSessionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Title = "Йде набір"
                        },
                        new
                        {
                            Id = 1,
                            Title = "Чорновик"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Набір завершено"
                        },
                        new
                        {
                            Id = 4,
                            Title = "У процесі"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Завершений"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Відмінений"
                        });
                });

            modelBuilder.Entity("JetStudy.Core.Entities.CourseSessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseSessionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Онлайн"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Офлайн"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Змішана (онлайн + офлайн)"
                        });
                });

            modelBuilder.Entity("JetStudy.Core.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.ParticipationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("CourseSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseSessionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.ParticipationRecordStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParticipationStatuses");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ffb01bfb-0c3b-4fa5-9f49-a10f9d4a5c7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c2c3a4a-2930-475c-a957-bc630c992703",
                            DateOfBirth = new DateTime(2048, 10, 6, 13, 38, 30, 109, DateTimeKind.Local).AddTicks(4570),
                            Email = "admin@jetstudy.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Petrenko",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@JETSTUDY.COM",
                            NormalizedUserName = "ADMIN@JETSTUDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK6TgdrJ88sGOaQhGPXWrwgyiDZ4fUZ+B/np07KAzdxFLdt33t1Ud4pDQhjAf3IT/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "726a295a-9a1a-40ba-9430-d910dd0ac229",
                            TwoFactorEnabled = false,
                            UserName = "admin@jetstudy.com"
                        },
                        new
                        {
                            Id = "991720fe-a14e-4e45-bf52-2dcb950dc6c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0eb85940-729b-4885-99e1-f30a8484853c",
                            DateOfBirth = new DateTime(2046, 10, 6, 13, 38, 30, 109, DateTimeKind.Local).AddTicks(4761),
                            Email = "std@jetstudy.com",
                            EmailConfirmed = false,
                            FirstName = "Andriy",
                            LastName = "Petrenko",
                            LockoutEnabled = false,
                            NormalizedEmail = "STD@JETSTUDY.COM",
                            NormalizedUserName = "STD@JETSTUDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJrk7GhdUSAgJHibLC3aWZwOaTg3h83O4nyNaENiGZQgrfDvqRqHMCC+D/qBCLQHSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af07ec0b-88c1-4f57-87f1-88e3c50260c5",
                            TwoFactorEnabled = false,
                            UserName = "std@jetstudy.com"
                        },
                        new
                        {
                            Id = "1f27bd84-3de8-4937-8ddc-a6a4d5312392",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b0a3398-1b2b-40d3-a7e0-dcc0ce6ed2d8",
                            DateOfBirth = new DateTime(2044, 10, 6, 13, 38, 30, 109, DateTimeKind.Local).AddTicks(4805),
                            Email = "teacher@jetstudy.com",
                            EmailConfirmed = false,
                            FirstName = "Olena",
                            LastName = "Petrenko",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@JETSTUDY.COM",
                            NormalizedUserName = "TEACHER@JETSTUDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELxkjBlil0wHFS5ZYRCBCOK1kQEow/q4hEKkUsIRSb1leOZSvwbGgxqYw0DQNp5EPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "166822c1-76c9-4f65-94f7-44de3d1c7eea",
                            TwoFactorEnabled = false,
                            UserName = "teacher@jetstudy.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "941f0d6f-dcca-4501-95b4-695d3bd754df",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "02861b13-b07c-48e5-97f0-9b3971d53c43",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "5ad454e4-2e78-4560-9a26-4524b0989763",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ffb01bfb-0c3b-4fa5-9f49-a10f9d4a5c7c",
                            RoleId = "941f0d6f-dcca-4501-95b4-695d3bd754df"
                        },
                        new
                        {
                            UserId = "ffb01bfb-0c3b-4fa5-9f49-a10f9d4a5c7c",
                            RoleId = "5ad454e4-2e78-4560-9a26-4524b0989763"
                        },
                        new
                        {
                            UserId = "1f27bd84-3de8-4937-8ddc-a6a4d5312392",
                            RoleId = "5ad454e4-2e78-4560-9a26-4524b0989763"
                        },
                        new
                        {
                            UserId = "991720fe-a14e-4e45-bf52-2dcb950dc6c6",
                            RoleId = "5ad454e4-2e78-4560-9a26-4524b0989763"
                        },
                        new
                        {
                            UserId = "991720fe-a14e-4e45-bf52-2dcb950dc6c6",
                            RoleId = "02861b13-b07c-48e5-97f0-9b3971d53c43"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseSessionUser", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("InstructorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JetStudy.Core.Entities.CourseSession", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JetStudy.Core.Entities.Certificate", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.ParticipationRecord", "ParticipationRecord")
                        .WithOne("Certificate")
                        .HasForeignKey("JetStudy.Core.Entities.Certificate", "ParticipationRecordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParticipationRecord");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.Course", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.User", "Owner")
                        .WithMany("Courses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.CourseSession", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("CourseId");

                    b.HasOne("JetStudy.Core.Entities.CourseSessionStatus", "Status")
                        .WithMany("Sessions")
                        .HasForeignKey("StatusId");

                    b.HasOne("JetStudy.Core.Entities.CourseSessionType", "Type")
                        .WithMany("Sessions")
                        .HasForeignKey("TypeId");

                    b.Navigation("Course");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.Lesson", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.CourseSession", "Session")
                        .WithMany("Lessons")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.ParticipationRecord", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.CourseSession", "CourseSession")
                        .WithMany("ParticipationRecords")
                        .HasForeignKey("CourseSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JetStudy.Core.Entities.ParticipationRecordStatus", "Status")
                        .WithMany("Records")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JetStudy.Core.Entities.User", "Student")
                        .WithMany("ParticipationRecords")
                        .HasForeignKey("StudentId");

                    b.Navigation("CourseSession");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JetStudy.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JetStudy.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JetStudy.Core.Entities.Course", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.CourseSession", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("ParticipationRecords");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.CourseSessionStatus", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.CourseSessionType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.ParticipationRecord", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();
                });

            modelBuilder.Entity("JetStudy.Core.Entities.ParticipationRecordStatus", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("JetStudy.Core.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("ParticipationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
